{"version":3,"file":"scheduling.controller.js","names":["require","response","request","boom","Types","Schedule","getSchedule","req","res","next","find","populate","path","select","username","exec","schedule","length","status","json","msg","notFound","getScheduleById","_id","ObjectId","params","findById","name","erp_code","id_controller","setSchedule","body","dateStart","hourStart","dateEnd","hourEnd","newSchedule","save","scheduleSaved","console","log","updateScheduleById","findByIdAndUpdate","updateSchedule","deleteScheduleById","findByIdAndDelete","deletedSchedule","JSONataExpression","dataPromise","queryJSONata","expression","jsonata","result","evaluate","module","exports"],"sources":["../../../src/controllers/mes/scheduling.controller.js"],"sourcesContent":["const { response, request } = require(\"express\");\nconst boom = require('@hapi/boom');\nconst { Types } = require('mongoose');\nconst Schedule = require(\"../../models/mes/scheduling.model\");\n\n\n\nconst getSchedule = async(req = request, res = response, next) => {\n    try {\n        const schedule = await Schedule.find()\n            .populate([{\n                path: '_idRecipe',\n                populate: {\n                    path: 'ingredients._idMaterial'\n                }\n            }, {\n                path: '_idRecipe',\n                populate: {\n                    path: 'ingredients._idLocation'\n                }\n            }])\n            .populate({ path: '_idProductionLine' })\n            .populate({ path: '_idUser', select: { username: 1 } }).exec()\n\n\n        if (schedule.length !== 0) {\n            res.status(200).json({\n                msg: 'Lista de Programaciones',\n                schedule\n            })\n        } else {\n            throw boom.notFound('Oops!, ubicaciones no encontradas')\n        }\n\n    } catch (err) {\n        next(err);\n    }\n}\n\nconst getScheduleById = async(req = request, res = response, next) => {\n    try {\n        const _id = Types.ObjectId(req.params._id);\n        const schedule = await Schedule.findById({ _id })\n            .populate({\n                path: '_idRecipe',\n                populate: {\n                    path: 'ingredients._idMaterial'\n                },\n                populate: {\n                    path: 'ingredients._idLocation'\n                },\n            })\n            .populate({ path: '_idProductionLine', select: { name: 1, erp_code: 1, id_controller: 1 } })\n            .populate({ path: '_idUser', select: { username: 1 } }).exec()\n        if (schedule.length !== 0) {\n            res.status(200).json({\n                msg: 'Lista de Programaciones',\n                schedule\n            })\n        } else {\n            throw boom.notFound('Oops!, ubicaciones no encontradas')\n        }\n\n    } catch (err) {\n        next(err);\n    }\n}\n\nconst setSchedule = async(req = request, res = response, next) => {\n    try {\n        let body = req.body\n        body.dateStart = body.dateStart + \" \" + body.hourStart;\n        body.dateEnd = body.dateEnd + \" \" + body.hourEnd;\n\n        const newSchedule = new Schedule(body);\n        const scheduleSaved = await newSchedule.save();\n        console.log(scheduleSaved);\n        res.status(200).json({\n            msg: 'Linea de producción actualizada por Id',\n            scheduleSaved\n        });\n\n    } catch (err) {\n        next(err);\n    }\n}\n\nconst updateScheduleById = async(req = request, res = response, next) => {\n    try {\n        let body = req.body\n        body.dateStart = body.dateStart + \" \" + body.hourStart;\n        body.dateEnd = body.dateEnd + \" \" + body.hourEnd;\n\n        const _id = Types.ObjectId(req.params._id);\n        const updateSchedule = await Schedule.findByIdAndUpdate(_id, body, { new: true });\n        if (updateSchedule != null) {\n            res.status(200).json({\n                msg: 'Programación actualizada',\n                updateSchedule\n            });\n        } else {\n            throw boom.notFound('Oops!, programación no encontrada')\n        }\n    } catch (err) {\n        next(err);\n    }\n\n}\n\nconst deleteScheduleById = async(req = request, res = response, next) => {\n    try {\n        const _id = Types.ObjectId(req.params._id);\n        const deletedSchedule = await Schedule.findByIdAndDelete(_id);\n        if (deletedSchedule != null) {\n            res.status(202).json({\n                msg: `Plan eliminado con exito _id:${_id}`\n            });\n        } else {\n            throw boom.notFound('Oops!, plan no encontrado, verifique el id')\n        }\n    } catch (err) {\n        next(err);\n    }\n}\n\nconst JSONataExpression = async(dataPromise) => {\n    const queryJSONata = `[$.{\"id\":_id,\"name\":name,\"erp_code\":erp_code,\"id_controller\":id_controller,\n        \"productionLineUse\":[productionLineUse.$.{\"_id\":_id,\"name\":name}],\n        \"ingredients\":[ingredients.$.{\"_idIngredient\":_id,\"_idMaterial\":_idMaterial._id,\"name\":_idMaterial.name,\"id_controller\":_idMaterial.id_controller,\"type\":_idMaterial.type,\"deleted\":_idMaterial.deleted,\"qty\":qty}]}]`;\n    const expression = jsonata(queryJSONata);\n\n    const result = expression.evaluate(dataPromise);\n    return result;\n}\n\n\n\nmodule.exports = {\n    getSchedule,\n    getScheduleById,\n    setSchedule,\n    updateScheduleById,\n    deleteScheduleById\n}"],"mappings":"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"}