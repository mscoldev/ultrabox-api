{"version":3,"file":"grafics.controller.js","names":["require","response","request","ProductionLog","nataFunction","getGraficsMolinos","req","res","aggregate","$match","molino","$group","_id","$dateToString","format","date","kgTotales","$sum","$sort","result1","result2","status","json","msg","molino1","molino2","message","getGraficskwton","query","startDate","endDate","console","log","setStartDateSet","Date","setEndDate","find","cantidad","$gt","$and","createdAt","$gte","$lt","then","productionLogs","modifiedProductionLogs","map","productionLog","modifiedProductionLog","toObject","kwTot","kwhpd004","kwhpd005","kwhpd006","kwTon","Math","floor10","err","error","queryResult","ex","data","module","exports"],"sources":["../../../../src/controllers/mes/graf/grafics.controller.js"],"sourcesContent":["const { response, request } = require('express');\nconst ProductionLog = require('../../../models/mes/productionLog.model');\nconst nataFunction = require('../../../helpers/JSONata')\n\nconst getGraficsMolinos = async (req = request, res = response) => {\n    try {\n        const result1 = await ProductionLog.aggregate([\n            { $match: { molino: 1 } },\n            {\n                $group: {\n                    _id: { $dateToString: { format: \"%Y-%m-%d\", date: \"$createdAt\" } },\n                    kgTotales: { $sum: \"$cantidad\" }\n                }\n            },\n            {\n                $sort: {\n                    _id: 1\n                }\n            }\n        ]);\n        const result2 = await ProductionLog.aggregate([\n            { $match: { molino: 2 } },\n            {\n                $group: {\n                    _id: { $dateToString: { format: \"%Y-%m-%d\", date: \"$createdAt\" } },\n                    kgTotales: { $sum: \"$cantidad\" }\n                }\n            },\n            {\n                $sort: {\n                    _id: 1\n                }\n            }\n        ]);\n\n        res.status(200).json({\n            msg: 'Grafico Molinos',\n            molino1: result1,\n            molino2: result2\n        })\n    } catch (err) {\n        res.status(500).json({\n            msg: err.message\n        })\n    }\n}\n\nconst getGraficskwton = async (req = request, res = response) => {\n    try {\n        const { startDate, endDate } = req.query\n        //*PREPARACION CONSULTA.\n        console.log(startDate);\n        console.log(endDate);\n\n        const setStartDateSet = new Date(startDate);\n        const setEndDate = new Date(endDate);\n\n        console.log(setStartDateSet);\n        console.log(setEndDate);\n\n\n        //*Buscar datos entre las fechas starDate y endDate\n        const queryResult = await ProductionLog.find({\n            cantidad: { $gt: 0 },\n            $and: [\n                { createdAt: { $gte: setStartDateSet } },\n                { createdAt: { $lt: setEndDate } },\n            ]\n        }).then((productionLogs) => {\n            const modifiedProductionLogs = productionLogs.map((productionLog) => {\n                const modifiedProductionLog = productionLog.toObject();\n                modifiedProductionLog.kwTot = productionLog.kwhpd004 + productionLog.kwhpd005 + productionLog.kwhpd006;\n                modifiedProductionLog.kwTon = Math.floor10(modifiedProductionLog.kwTot / productionLog.cantidad, -3);\n                return modifiedProductionLog;\n            });\n            return modifiedProductionLogs\n        }).catch((err) => {\n            console.error(err);\n        });\n\n\n        // //*Expresion JSONata\n        const ex = `{\"molino1\":$average($filter($, function ($v, $i, $a) {$v.molino = \"1\"}).kwTon),\n        \"molino2\": $average($filter($, function ($v, $i, $a) { $v.molino = \"2\" }).kwTon)}`\n\n        const data = await nataFunction(queryResult, ex)\n\n        res.status(200).json({\n            msg: 'Grafico Molinos',\n            data\n        })\n        // console.log(test.req.body);\n    } catch (err) {\n        res.status(500).json({\n            msg: err.message\n        })\n    }\n}\n\n\n\n\n\n\nmodule.exports = { getGraficsMolinos, getGraficskwton }"],"mappings":"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"}