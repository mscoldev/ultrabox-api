{"version":3,"file":"material.controller.js","names":["require","response","request","boom","Types","Material","setValuesToPLC","Device","updateMaterialToPLC","req","res","next","deviceMasterName","tagNameArray","find","select","_id","name","_idControllerMaterial","material","limitInputs","limitMaterials","length","findOne","deviceInfo","infoPLC","toObject","console","log","responsePLC","failedDependency","status","json","msg","getMaterials","deleted","populate","path","model","options","lean","exec","materials","message","getMaterialsById","findById","params","materialId","notFound","getMaterialsByLine","productionLineUse","query","arrayProductionLineUse","split","objectIdArray","map","id","ObjectId","$in","updateMaterialById","paramsId","body","findByIdAndUpdate","updatedMaterial","deleteMaterialById","deletedMaterial","code","errMsg","Object","keys","keyValue","statusText","createMaterial","save","materialSaved","badRequest","module","exports"],"sources":["../../../src/controllers/mes/material.controller.js"],"sourcesContent":["const { response, request } = require('express');\nconst boom = require('@hapi/boom');\nconst { Types } = require('mongoose');\nconst Material = require('../../models/material.model');\nconst setValuesToPLC = require('../../controllers/mes/PLCs/plcs.controller');\nconst Device = require('../../models/connections/device.model');\n\n// class ControladorABMES {\n//   constructor(infoPLC) {\n//     this.ip = infoPLC.ip; //IP del controlador\n//     this.slot = infoPLC.slot; //Slot del controladorSlot del controlador\n//     this.tagNameArray = infoPLC.tagNameArray; //tagNameArray del controladorNombre con el que se definió para el canal de entrada de materiales.\n//     this.limitInputs = infoPLC.limitInputs; // Numero de canales de entrada.\n//     this.limitMaterials = infoPLC.limitMaterials; // Numero maximo de materiales a crear en el controlador.\n//     // this.materials = infoPLC.materials;\n//   }\n\nconst updateMaterialToPLC = async (req = request, res = response, next) => {\n  const deviceMasterName = 'PLC_PRINCIPAL';\n  const tagNameArray = 'PROD_TOLVAS';\n\n  // Leer los datos de de configuración del PLC que están registrados en la base de datos.\n  // const infoPLC = {\n  //   ip: '192.168.201.108',\n  //   slot: 3,\n  //   nameTagChannelIn: '',\n  //   limitInputs: 14,\n  //   limitMaterials: 14,\n  // };\n  const material = await Material.find({}).select({\n    _id: 0,\n    name: 1,\n    _idControllerMaterial: 1,\n  });\n  const limitInputs = 14;\n  const limitMaterials = material.length;\n\n  const deviceInfo = await Device.findOne({ name: deviceMasterName });\n  const infoPLC = deviceInfo.toObject();\n  infoPLC.limitInputs = limitInputs;\n  infoPLC.limitMaterials = limitMaterials;\n  infoPLC.tagNameArray = tagNameArray;\n\n  console.log({ material });\n\n  // const materials = [\n  //   {\n  //     name: 'CLINKER',\n  //     _idController: 0,\n  //   },\n  //   {\n  //     name: 'CALIZA',\n  //     _idController: 1,\n  //   },\n  //   {\n  //     name: 'YESO',\n  //     _idController: 2,\n  //   },\n  //   {\n  //     name: 'ESCORIA',\n  //     _idController: 3,\n  //   },\n  //   {\n  //     name: 'CENIZA',\n  //     _idController: 4,\n  //   },\n  //   {\n  //     name: 'ARCILLA T',\n  //     _idController: 5,\n  //   },\n  //   ,\n  //   {\n  //     name: 'ANDESITA',\n  //     _idController: 8,\n  //   },\n  // ];\n\n  try {\n    console.log({ infoPLC });\n    const responsePLC = await setValuesToPLC(infoPLC, material);\n    if (!responsePLC) {\n      throw boom.failedDependency(\n        'Falla en el modulo de conexión con controlador'\n      );\n    }\n    res.status(200).json({\n      msg: 'Materiales actualizados en PLC',\n      responsePLC: responsePLC,\n    });\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst getMaterials = async (req = request, res = response) => {\n  try {\n    const materials = await Material.find({ deleted: false })\n      .populate([\n        {\n          path: 'productionLineUse',\n          model: 'ProductionLine',\n          options: { lean: true },\n          select: { name: 1 },\n        },\n      ])\n      .populate({\n        path: 'unit',\n        model: 'Unit',\n      })\n      .exec();\n    res.status(200).json({\n      msg: 'List of materials',\n      materials,\n    });\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n};\n\n//TODO: Implementar verificacion de tipo de datos al realizar busquedas por ID.\n\nconst getMaterialsById = async (req = request, res = response, next) => {\n  try {\n    const material = await Material.findById(req.params.materialId);\n    if (material != null) {\n      res.status(200).json({\n        msg: 'Material por Id',\n        material,\n      });\n    } else {\n      throw boom.notFound('Material not found');\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst getMaterialsByLine = async (req = request, res = response, next) => {\n  try {\n    const { productionLineUse } = req.query;\n    const arrayProductionLineUse = productionLineUse.split(',');\n    const objectIdArray = arrayProductionLineUse.map((id) =>\n      Types.ObjectId(id)\n    );\n\n    console.log(objectIdArray);\n\n    const material = await Material.find({\n      productionLineUse: { $in: objectIdArray },\n    })\n      .populate([\n        {\n          path: 'productionLineUse',\n          model: 'ProductionLine',\n          options: { lean: true },\n          select: { name: 1 },\n        },\n      ])\n      .populate({\n        path: 'unit',\n        model: 'Unit',\n      })\n      .exec();\n\n    if (material != null) {\n      res.status(200).json({\n        msg: 'Materiales por linea de produccion',\n        material,\n      });\n    } else {\n      throw boom.notFound('Material no encontrado');\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst updateMaterialById = async (req = request, res = response) => {\n  try {\n    const paramsId = req.params.materialId;\n    const body = req.body;\n\n    const updatedMaterial = await Material.findByIdAndUpdate(paramsId, body, {\n      new: true,\n    });\n    if (updatedMaterial != null) {\n      res.status(200).json({\n        msg: 'Material actualizado por Id',\n        updatedMaterial,\n      });\n    } else {\n      res.status(404).json({\n        msg: 'Material no encontrado, verifique el Id ingresado',\n      });\n    }\n  } catch (err) {\n    return res.status(500).json({\n      message: err.message,\n    });\n  }\n};\n\nconst deleteMaterialById = async (req = request, res = response) => {\n  try {\n    const paramsId = req.params.materialId;\n    const body = { deleted: true };\n    const deletedMaterial = await Material.findByIdAndUpdate(paramsId, body);\n    if (deletedMaterial != null) {\n      res.status(202).json({\n        msg: 'Material eliminado Id:' + paramsId,\n      });\n    } else {\n      res.status(404).json({\n        msg: 'Material no encontrado, verifique el Id ingresado',\n      });\n    }\n  } catch (error) {\n    // Set custom error for unique keys\n    let errMsg;\n    if (error.code == 11000) {\n      errMsg = Object.keys(error.keyValue)[0] + ' already exists.';\n    } else {\n      errMsg = error.message;\n    }\n    res.status(400).json({ statusText: 'Bad Request', message: errMsg });\n  }\n};\n\nconst createMaterial = async (req = request, res = response, next) => {\n  //TODO: Usar desestructuracion de objetos\n  try {\n    const body = req.body;\n    console.log(body);\n    const material = new Material(body);\n\n    const materialSaved = await material.save();\n    if (materialSaved != null) {\n      res.status(201).json({\n        msg: 'Material creado',\n        materialSaved,\n      });\n    } else {\n      throw boom.badRequest('Algo salió mal, verifica el requerimiento');\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nmodule.exports = {\n  createMaterial,\n  getMaterials,\n  getMaterialsById,\n  getMaterialsByLine,\n  updateMaterialById,\n  deleteMaterialById,\n  updateMaterialToPLC,\n};\n"],"mappings":"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"}