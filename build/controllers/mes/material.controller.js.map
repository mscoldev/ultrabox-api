{"version":3,"file":"material.controller.js","names":["require","response","request","boom","Types","Material","setValuesToPLC","updateMaterialToPLC","req","res","next","infoPLC","ip","slot","nameTagChannelIn","limitInputs","limitMaterials","materials","name","_idController","responsePLC","failedDependency","status","json","msg","getMaterials","find","populate","path","model","options","lean","select","exec","message","getMaterialsById","findById","params","materialId","material","notFound","getMaterialsByLine","productionLineUse","query","arrayProductionLineUse","split","objectIdArray","map","id","ObjectId","console","log","$in","updateMaterialById","paramsId","body","findByIdAndUpdate","updatedMaterial","deleteMaterialById","deleted","deletedMaterial","code","errMsg","Object","keys","keyValue","statusText","createMaterial","save","materialSaved","badRequest","module","exports"],"sources":["../../../src/controllers/mes/material.controller.js"],"sourcesContent":["const { response, request } = require('express');\nconst boom = require('@hapi/boom');\nconst { Types } = require('mongoose');\nconst Material = require(\"../../models/material.model\");\nconst setValuesToPLC = require(\"../../controllers/mes/PLCs/plcs.controller\");\n\n\nconst updateMaterialToPLC = async (req = request, res = response, next) => {\n  const infoPLC = {\n    ip: '192.168.201.108',\n    slot: 3,\n    nameTagChannelIn: 'TOLVA',\n    limitInputs: 14,\n    limitMaterials: 14,\n\n  }\n\n  const materials = [{\n    name: 'CLINKER',\n    _idController: 0\n  }, {\n    name: 'CALIZA',\n    _idController: 1\n  },\n  {\n    name: 'YESO',\n    _idController: 2\n  },\n  {\n    name: 'ESCORIA',\n    _idController: 3\n  },\n  {\n    name: 'CENIZA',\n    _idController: 4\n  },\n  {\n    name: 'ARCILLA T',\n    _idController: 5\n  }, ,\n  {\n    name: 'ANDESITA',\n    _idController: 8\n  }\n  ]\n  try {\n    const responsePLC = setValuesToPLC(infoPLC, materials);\n    if (!responsePLC) {\n      throw boom.failedDependency('Falla en el modulo de conexion con controlador')\n    }\n    res.status(200).json({\n      msg: 'Materiales actualizados en PLC',\n      responsePLC: responsePLC\n    })\n  } catch (err) {\n    next(err);\n  }\n}\n\nconst getMaterials = async (req = request, res = response,) => {\n  try {\n    const materials = await Material.find({ \"deleted\": false }).populate([{\n      path: 'productionLineUse',\n      model: 'ProductionLine',\n      options: { lean: true },\n      select: { name: 1 }\n    }])\n      .populate({\n        path: 'unit',\n        model: 'Unit',\n      })\n      .exec();\n    res.status(200).json({\n      msg: 'List of materials',\n      materials\n    })\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n}\n\n\n//TODO: Implementar verificacion de tipo de datos al realizar busquedas por ID.\n\nconst getMaterialsById = async (req = request, res = response, next) => {\n  try {\n    const material = await Material.findById(req.params.materialId);\n    if (material != null) {\n      res.status(200).json({\n        msg: 'Material por Id',\n        material\n      })\n    } else {\n      throw boom.notFound('Material not found')\n    }\n  } catch (err) {\n    next(err);\n  }\n}\n\nconst getMaterialsByLine = async (req = request, res = response, next) => {\n\n  try {\n\n    const { productionLineUse } = req.query\n    const arrayProductionLineUse = productionLineUse.split(\",\");\n    const objectIdArray = arrayProductionLineUse.map(id => Types.ObjectId(id));\n\n    console.log(objectIdArray);\n\n    const material = await Material.find({ 'productionLineUse': { $in: objectIdArray } })\n      .populate([{\n        path: 'productionLineUse',\n        model: 'ProductionLine',\n        options: { lean: true },\n        select: { name: 1 }\n      }])\n      .populate({\n        path: 'unit',\n        model: 'Unit',\n      })\n      .exec();\n\n    if (material != null) {\n      res.status(200).json({\n        msg: 'Materiales por linea de produccion',\n        material\n      })\n    } else {\n      throw boom.notFound('Material no encontrado')\n    }\n\n  } catch (err) {\n\n    next(err);\n  }\n\n}\n\nconst updateMaterialById = async (req = request, res = response) => {\n  try {\n    const paramsId = req.params.materialId;\n    const body = req.body;\n\n    const updatedMaterial = await Material.findByIdAndUpdate(paramsId, body, { new: true });\n    if (updatedMaterial != null) {\n      res.status(200).json({\n        msg: 'Material actualizado por Id',\n        updatedMaterial\n      });\n    } else {\n      res.status(404).json({\n        msg: 'Material no encontrado, verifique el Id ingresado'\n      })\n    }\n  } catch (err) {\n    return res.status(500).json({\n      message: err.message\n    })\n  }\n}\n\nconst deleteMaterialById = async (req = request, res = response) => {\n  try {\n    const paramsId = req.params.materialId;\n    const body = { deleted: true }\n    const deletedMaterial = await Material.findByIdAndUpdate(paramsId, body);\n    if (deletedMaterial != null) {\n      res.status(202).json({\n        msg: 'Material eliminado Id:' + paramsId\n      });\n    } else {\n      res.status(404).json({\n        msg: 'Material no encontrado, verifique el Id ingresado'\n      })\n    }\n  } catch (error) { // Set custom error for unique keys\n    let errMsg;\n    if (error.code == 11000) {\n      errMsg = Object.keys(error.keyValue)[0] + \" already exists.\";\n    } else {\n      errMsg = error.message;\n    }\n    res.status(400).json({ statusText: \"Bad Request\", message: errMsg });\n  };\n}\n\nconst createMaterial = async (req = request, res = response, next) => {\n  //TODO: Usar desestructuracion de objetos\n  try {\n    const body = req.body;\n    console.log(body);\n    const material = new Material(body);\n\n    const materialSaved = await material.save();\n    if (materialSaved != null) {\n      res.status(201).json({\n        msg: 'Material creado',\n        materialSaved\n      })\n    } else {\n      throw boom.badRequest('Algo sali√≥ mal, verifica el requerimiento')\n    }\n\n  } catch (err) {\n    next(err);\n  }\n\n}\n\n\n\nmodule.exports = {\n  createMaterial,\n  getMaterials,\n  getMaterialsById,\n  getMaterialsByLine,\n  updateMaterialById,\n  deleteMaterialById,\n  updateMaterialToPLC\n}\n"],"mappings":";;;;+CACA,oJ;;;;;;AADA,eAA8BA,OAAO,CAAC,SAAD,CAArC;AAAA,IAAQC,QAAR,YAAQA,QAAR;AAAA,IAAkBC,OAAlB,YAAkBA,OAAlB;;AACA,IAAMC,IAAI,GAAGH,OAAO,CAAC,YAAD,CAApB;;AACA,gBAAkBA,OAAO,CAAC,UAAD,CAAzB;AAAA,IAAQI,KAAR,aAAQA,KAAR;;AACA,IAAMC,QAAQ,GAAGL,OAAO,CAAC,6BAAD,CAAxB;;AACA,IAAMM,cAAc,GAAGN,OAAO,CAAC,4CAAD,CAA9B;;AAGA,IAAMO,mBAAmB;EAAA,sEAAG;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAOC,GAAP,2DAAaN,OAAb;YAAsBO,GAAtB,2DAA4BR,QAA5B;YAAsCS,IAAtC;YACpBC,OADoB,GACV;cACdC,EAAE,EAAE,iBADU;cAEdC,IAAI,EAAE,CAFQ;cAGdC,gBAAgB,EAAE,OAHJ;cAIdC,WAAW,EAAE,EAJC;cAKdC,cAAc,EAAE;YALF,CADU;YAUpBC,SAVoB,GAUR,CAAC;cACjBC,IAAI,EAAE,SADW;cAEjBC,aAAa,EAAE;YAFE,CAAD,EAGf;cACDD,IAAI,EAAE,QADL;cAEDC,aAAa,EAAE;YAFd,CAHe,EAOlB;cACED,IAAI,EAAE,MADR;cAEEC,aAAa,EAAE;YAFjB,CAPkB,EAWlB;cACED,IAAI,EAAE,SADR;cAEEC,aAAa,EAAE;YAFjB,CAXkB,EAelB;cACED,IAAI,EAAE,QADR;cAEEC,aAAa,EAAE;YAFjB,CAfkB,EAmBlB;cACED,IAAI,EAAE,WADR;cAEEC,aAAa,EAAE;YAFjB,CAnBkB,GAuBlB;cACED,IAAI,EAAE,UADR;cAEEC,aAAa,EAAE;YAFjB,CAvBkB,CAVQ;YAAA;YAuClBC,WAvCkB,GAuCJd,cAAc,CAACK,OAAD,EAAUM,SAAV,CAvCV;;YAAA,IAwCnBG,WAxCmB;cAAA;cAAA;YAAA;;YAAA,MAyChBjB,IAAI,CAACkB,gBAAL,CAAsB,gDAAtB,CAzCgB;;UAAA;YA2CxBZ,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cACnBC,GAAG,EAAE,gCADc;cAEnBJ,WAAW,EAAEA;YAFM,CAArB;YA3CwB;YAAA;;UAAA;YAAA;YAAA;YAgDxBV,IAAI,aAAJ;;UAhDwB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAnBH,mBAAmB;IAAA;EAAA;AAAA,GAAzB;;AAoDA,IAAMkB,YAAY;EAAA,uEAAG;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAOjB,GAAP,8DAAaN,OAAb;YAAsBO,GAAtB,8DAA4BR,QAA5B;YAAA;YAAA;YAAA,OAEOI,QAAQ,CAACqB,IAAT,CAAc;cAAE,WAAW;YAAb,CAAd,EAAoCC,QAApC,CAA6C,CAAC;cACpEC,IAAI,EAAE,mBAD8D;cAEpEC,KAAK,EAAE,gBAF6D;cAGpEC,OAAO,EAAE;gBAAEC,IAAI,EAAE;cAAR,CAH2D;cAIpEC,MAAM,EAAE;gBAAEd,IAAI,EAAE;cAAR;YAJ4D,CAAD,CAA7C,EAMrBS,QANqB,CAMZ;cACRC,IAAI,EAAE,MADE;cAERC,KAAK,EAAE;YAFC,CANY,EAUrBI,IAVqB,EAFP;;UAAA;YAEXhB,SAFW;YAajBR,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cACnBC,GAAG,EAAE,mBADc;cAEnBP,SAAS,EAATA;YAFmB,CAArB;YAbiB;YAAA;;UAAA;YAAA;YAAA;YAAA,kCAkBVR,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cAAEW,OAAO,EAAE,aAAIA;YAAf,CAArB,CAlBU;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAZT,YAAY;IAAA;EAAA;AAAA,GAAlB,C,CAuBA;;;AAEA,IAAMU,gBAAgB;EAAA,uEAAG;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAO3B,GAAP,8DAAaN,OAAb;YAAsBO,GAAtB,8DAA4BR,QAA5B;YAAsCS,IAAtC;YAAA;YAAA;YAAA,OAEEL,QAAQ,CAAC+B,QAAT,CAAkB5B,GAAG,CAAC6B,MAAJ,CAAWC,UAA7B,CAFF;;UAAA;YAEfC,QAFe;;YAAA,MAGjBA,QAAQ,IAAI,IAHK;cAAA;cAAA;YAAA;;YAInB9B,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cACnBC,GAAG,EAAE,iBADc;cAEnBe,QAAQ,EAARA;YAFmB,CAArB;YAJmB;YAAA;;UAAA;YAAA,MASbpC,IAAI,CAACqC,QAAL,CAAc,oBAAd,CATa;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAYrB9B,IAAI,cAAJ;;UAZqB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAhByB,gBAAgB;IAAA;EAAA;AAAA,GAAtB;;AAgBA,IAAMM,kBAAkB;EAAA,uEAAG;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAOjC,GAAP,8DAAaN,OAAb;YAAsBO,GAAtB,8DAA4BR,QAA5B;YAAsCS,IAAtC;YAAA;YAIfgC,iBAJe,GAIOlC,GAAG,CAACmC,KAJX,CAIfD,iBAJe;YAKjBE,sBALiB,GAKQF,iBAAiB,CAACG,KAAlB,CAAwB,GAAxB,CALR;YAMjBC,aANiB,GAMDF,sBAAsB,CAACG,GAAvB,CAA2B,UAAAC,EAAE;cAAA,OAAI5C,KAAK,CAAC6C,QAAN,CAAeD,EAAf,CAAJ;YAAA,CAA7B,CANC;YAQvBE,OAAO,CAACC,GAAR,CAAYL,aAAZ;YARuB;YAAA,OAUAzC,QAAQ,CAACqB,IAAT,CAAc;cAAE,qBAAqB;gBAAE0B,GAAG,EAAEN;cAAP;YAAvB,CAAd,EACpBnB,QADoB,CACX,CAAC;cACTC,IAAI,EAAE,mBADG;cAETC,KAAK,EAAE,gBAFE;cAGTC,OAAO,EAAE;gBAAEC,IAAI,EAAE;cAAR,CAHA;cAITC,MAAM,EAAE;gBAAEd,IAAI,EAAE;cAAR;YAJC,CAAD,CADW,EAOpBS,QAPoB,CAOX;cACRC,IAAI,EAAE,MADE;cAERC,KAAK,EAAE;YAFC,CAPW,EAWpBI,IAXoB,EAVA;;UAAA;YAUjBM,QAViB;;YAAA,MAuBnBA,QAAQ,IAAI,IAvBO;cAAA;cAAA;YAAA;;YAwBrB9B,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cACnBC,GAAG,EAAE,oCADc;cAEnBe,QAAQ,EAARA;YAFmB,CAArB;YAxBqB;YAAA;;UAAA;YAAA,MA6BfpC,IAAI,CAACqC,QAAL,CAAc,wBAAd,CA7Be;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAkCvB9B,IAAI,cAAJ;;UAlCuB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAlB+B,kBAAkB;IAAA;EAAA;AAAA,GAAxB;;AAuCA,IAAMY,kBAAkB;EAAA,uEAAG;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAO7C,GAAP,8DAAaN,OAAb;YAAsBO,GAAtB,8DAA4BR,QAA5B;YAAA;YAEjBqD,QAFiB,GAEN9C,GAAG,CAAC6B,MAAJ,CAAWC,UAFL;YAGjBiB,IAHiB,GAGV/C,GAAG,CAAC+C,IAHM;YAAA;YAAA,OAKOlD,QAAQ,CAACmD,iBAAT,CAA2BF,QAA3B,EAAqCC,IAArC,EAA2C;cAAE,OAAK;YAAP,CAA3C,CALP;;UAAA;YAKjBE,eALiB;;YAMvB,IAAIA,eAAe,IAAI,IAAvB,EAA6B;cAC3BhD,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;gBACnBC,GAAG,EAAE,6BADc;gBAEnBiC,eAAe,EAAfA;cAFmB,CAArB;YAID,CALD,MAKO;cACLhD,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;gBACnBC,GAAG,EAAE;cADc,CAArB;YAGD;;YAfsB;YAAA;;UAAA;YAAA;YAAA;YAAA,kCAiBhBf,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cAC1BW,OAAO,EAAE,aAAIA;YADa,CAArB,CAjBgB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAlBmB,kBAAkB;IAAA;EAAA;AAAA,GAAxB;;AAuBA,IAAMK,kBAAkB;EAAA,uEAAG;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAOlD,GAAP,8DAAaN,OAAb;YAAsBO,GAAtB,8DAA4BR,QAA5B;YAAA;YAEjBqD,QAFiB,GAEN9C,GAAG,CAAC6B,MAAJ,CAAWC,UAFL;YAGjBiB,IAHiB,GAGV;cAAEI,OAAO,EAAE;YAAX,CAHU;YAAA;YAAA,OAIOtD,QAAQ,CAACmD,iBAAT,CAA2BF,QAA3B,EAAqCC,IAArC,CAJP;;UAAA;YAIjBK,eAJiB;;YAKvB,IAAIA,eAAe,IAAI,IAAvB,EAA6B;cAC3BnD,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;gBACnBC,GAAG,EAAE,2BAA2B8B;cADb,CAArB;YAGD,CAJD,MAIO;cACL7C,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;gBACnBC,GAAG,EAAE;cADc,CAArB;YAGD;;YAbsB;YAAA;;UAAA;YAAA;YAAA;;YAcP;YAEhB,IAAI,aAAMqC,IAAN,IAAc,KAAlB,EAAyB;cACvBC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAY,aAAMC,QAAlB,EAA4B,CAA5B,IAAiC,kBAA1C;YACD,CAFD,MAEO;cACLH,MAAM,GAAG,aAAM5B,OAAf;YACD;;YACDzB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cAAE2C,UAAU,EAAE,aAAd;cAA6BhC,OAAO,EAAE4B;YAAtC,CAArB;;UArBuB;YAsBxB;;UAtBwB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAlBJ,kBAAkB;IAAA;EAAA;AAAA,GAAxB;;AAyBA,IAAMS,cAAc;EAAA,uEAAG;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAO3D,GAAP,8DAAaN,OAAb;YAAsBO,GAAtB,8DAA4BR,QAA5B;YAAsCS,IAAtC;YAAA;YAGb6C,IAHa,GAGN/C,GAAG,CAAC+C,IAHE;YAInBL,OAAO,CAACC,GAAR,CAAYI,IAAZ;YACMhB,QALa,GAKF,IAAIlC,QAAJ,CAAakD,IAAb,CALE;YAAA;YAAA,OAOShB,QAAQ,CAAC6B,IAAT,EAPT;;UAAA;YAObC,aAPa;;YAAA,MAQfA,aAAa,IAAI,IARF;cAAA;cAAA;YAAA;;YASjB5D,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cACnBC,GAAG,EAAE,iBADc;cAEnB6C,aAAa,EAAbA;YAFmB,CAArB;YATiB;YAAA;;UAAA;YAAA,MAcXlE,IAAI,CAACmE,UAAL,CAAgB,2CAAhB,CAdW;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;YAkBnB5D,IAAI,cAAJ;;UAlBmB;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAdyD,cAAc;IAAA;EAAA;AAAA,GAApB;;AAyBAI,MAAM,CAACC,OAAP,GAAiB;EACfL,cAAc,EAAdA,cADe;EAEf1C,YAAY,EAAZA,YAFe;EAGfU,gBAAgB,EAAhBA,gBAHe;EAIfM,kBAAkB,EAAlBA,kBAJe;EAKfY,kBAAkB,EAAlBA,kBALe;EAMfK,kBAAkB,EAAlBA,kBANe;EAOfnD,mBAAmB,EAAnBA;AAPe,CAAjB"}