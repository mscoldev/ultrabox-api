{"version":3,"file":"material.controller.js","names":["require","response","request","boom","Types","Material","setValuesToPLC","updateMaterialToPLC","req","res","next","infoPLC","ip","slot","nameTagChannelIn","limitInputs","limitMaterials","materials","name","_idController","responsePLC","failedDependency","status","json","msg","getMaterials","find","deleted","populate","path","model","options","lean","select","exec","message","getMaterialsById","findById","params","materialId","material","notFound","getMaterialsByLine","productionLineUse","query","arrayProductionLineUse","split","objectIdArray","map","id","ObjectId","console","log","$in","updateMaterialById","paramsId","body","findByIdAndUpdate","updatedMaterial","deleteMaterialById","deletedMaterial","code","errMsg","Object","keys","keyValue","statusText","createMaterial","save","materialSaved","badRequest","module","exports"],"sources":["../../../src/controllers/mes/material.controller.js"],"sourcesContent":["const { response, request } = require('express');\nconst boom = require('@hapi/boom');\nconst { Types } = require('mongoose');\nconst Material = require('../../models/material.model');\nconst setValuesToPLC = require('../../controllers/mes/PLCs/plcs.controller');\n\nconst updateMaterialToPLC = async (req = request, res = response, next) => {\n  const infoPLC = {\n    ip: '192.168.201.108',\n    slot: 3,\n    nameTagChannelIn: '',\n    limitInputs: 14,\n    limitMaterials: 14,\n  };\n\n  const materials = [\n    {\n      name: 'CLINKER',\n      _idController: 0,\n    },\n    {\n      name: 'CALIZA',\n      _idController: 1,\n    },\n    {\n      name: 'YESO',\n      _idController: 2,\n    },\n    {\n      name: 'ESCORIA',\n      _idController: 3,\n    },\n    {\n      name: 'CENIZA',\n      _idController: 4,\n    },\n    {\n      name: 'ARCILLA T',\n      _idController: 5,\n    },\n    ,\n    {\n      name: 'ANDESITA',\n      _idController: 8,\n    },\n  ];\n  try {\n    const responsePLC = setValuesToPLC(infoPLC, materials);\n    if (!responsePLC) {\n      throw boom.failedDependency(\n        'Falla en el modulo de conexion con controlador'\n      );\n    }\n    res.status(200).json({\n      msg: 'Materiales actualizados en PLC',\n      responsePLC: responsePLC,\n    });\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst getMaterials = async (req = request, res = response) => {\n  try {\n    const materials = await Material.find({ deleted: false })\n      .populate([\n        {\n          path: 'productionLineUse',\n          model: 'ProductionLine',\n          options: { lean: true },\n          select: { name: 1 },\n        },\n      ])\n      .populate({\n        path: 'unit',\n        model: 'Unit',\n      })\n      .exec();\n    res.status(200).json({\n      msg: 'List of materials',\n      materials,\n    });\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n};\n\n//TODO: Implementar verificacion de tipo de datos al realizar busquedas por ID.\n\nconst getMaterialsById = async (req = request, res = response, next) => {\n  try {\n    const material = await Material.findById(req.params.materialId);\n    if (material != null) {\n      res.status(200).json({\n        msg: 'Material por Id',\n        material,\n      });\n    } else {\n      throw boom.notFound('Material not found');\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst getMaterialsByLine = async (req = request, res = response, next) => {\n  try {\n    const { productionLineUse } = req.query;\n    const arrayProductionLineUse = productionLineUse.split(',');\n    const objectIdArray = arrayProductionLineUse.map((id) =>\n      Types.ObjectId(id)\n    );\n\n    console.log(objectIdArray);\n\n    const material = await Material.find({\n      productionLineUse: { $in: objectIdArray },\n    })\n      .populate([\n        {\n          path: 'productionLineUse',\n          model: 'ProductionLine',\n          options: { lean: true },\n          select: { name: 1 },\n        },\n      ])\n      .populate({\n        path: 'unit',\n        model: 'Unit',\n      })\n      .exec();\n\n    if (material != null) {\n      res.status(200).json({\n        msg: 'Materiales por linea de produccion',\n        material,\n      });\n    } else {\n      throw boom.notFound('Material no encontrado');\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst updateMaterialById = async (req = request, res = response) => {\n  try {\n    const paramsId = req.params.materialId;\n    const body = req.body;\n\n    const updatedMaterial = await Material.findByIdAndUpdate(paramsId, body, {\n      new: true,\n    });\n    if (updatedMaterial != null) {\n      res.status(200).json({\n        msg: 'Material actualizado por Id',\n        updatedMaterial,\n      });\n    } else {\n      res.status(404).json({\n        msg: 'Material no encontrado, verifique el Id ingresado',\n      });\n    }\n  } catch (err) {\n    return res.status(500).json({\n      message: err.message,\n    });\n  }\n};\n\nconst deleteMaterialById = async (req = request, res = response) => {\n  try {\n    const paramsId = req.params.materialId;\n    const body = { deleted: true };\n    const deletedMaterial = await Material.findByIdAndUpdate(paramsId, body);\n    if (deletedMaterial != null) {\n      res.status(202).json({\n        msg: 'Material eliminado Id:' + paramsId,\n      });\n    } else {\n      res.status(404).json({\n        msg: 'Material no encontrado, verifique el Id ingresado',\n      });\n    }\n  } catch (error) {\n    // Set custom error for unique keys\n    let errMsg;\n    if (error.code == 11000) {\n      errMsg = Object.keys(error.keyValue)[0] + ' already exists.';\n    } else {\n      errMsg = error.message;\n    }\n    res.status(400).json({ statusText: 'Bad Request', message: errMsg });\n  }\n};\n\nconst createMaterial = async (req = request, res = response, next) => {\n  //TODO: Usar desestructuracion de objetos\n  try {\n    const body = req.body;\n    console.log(body);\n    const material = new Material(body);\n\n    const materialSaved = await material.save();\n    if (materialSaved != null) {\n      res.status(201).json({\n        msg: 'Material creado',\n        materialSaved,\n      });\n    } else {\n      throw boom.badRequest('Algo sali√≥ mal, verifica el requerimiento');\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nmodule.exports = {\n  createMaterial,\n  getMaterials,\n  getMaterialsById,\n  getMaterialsByLine,\n  updateMaterialById,\n  deleteMaterialById,\n  updateMaterialToPLC,\n};\n"],"mappings":"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"}