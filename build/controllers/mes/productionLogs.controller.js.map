{"version":3,"file":"productionLogs.controller.js","names":["require","response","request","ProductionLog","ProductionLine","getProductionLogs","req","res","query","sort","limit","console","log","find","createdAt","exec","productionLogs","productionLines","status","json","msg","message","createProductionLog","body","productionLog","save","productionLogSaved","module","exports"],"sources":["../../../src/controllers/mes/productionLogs.controller.js"],"sourcesContent":["const { response, request } = require(\"express\");\nconst ProductionLog = require(\"../../models/mes/productionLog.model\");\nconst ProductionLine = require(\"../../models/productionLine.model\");\n\n\nconst getProductionLogs = async (req = request, res = response) => {\n    const { sort, limit } = req.query\n    console.log(req.query);\n    try {\n        const productionLogs = await ProductionLog.find()\n            .sort({ createdAt: sort })\n            .limit(limit).exec();\n        const productionLines = await ProductionLine.find()\n        res.status(200).json({\n            msg: 'Registros de produccion',\n            productionLogs,\n            productionLines\n        })\n    } catch (err) {\n        return res.status(500).json({ msg: `Opps!, se ha generado un error: ${err.message}` });\n    }\n}\n\n\nconst createProductionLog = async (req = request, res = response) => {\n    try {\n        const body = req.body;\n        console.log(body);\n        const productionLog = new ProductionLog(body);\n\n        const productionLogSaved = await productionLog.save();\n\n        res.status(201).json({\n            msg: 'Registro de produccion creado',\n            productionLogSaved\n        })\n    } catch (err) {\n        return res.status(500).json({ msg: `Opps!, se ha producido un error : ${err.message}` })\n    }\n}\n\nmodule.exports = {\n    getProductionLogs,\n    createProductionLog\n}"],"mappings":";;;;+CACA,oJ;;;;;;AADA,eAA8BA,OAAO,CAAC,SAAD,CAArC;AAAA,IAAQC,QAAR,YAAQA,QAAR;AAAA,IAAkBC,OAAlB,YAAkBA,OAAlB;;AACA,IAAMC,aAAa,GAAGH,OAAO,CAAC,sCAAD,CAA7B;;AACA,IAAMI,cAAc,GAAGJ,OAAO,CAAC,mCAAD,CAA9B;;AAGA,IAAMK,iBAAiB;EAAA,sEAAG;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAOC,GAAP,2DAAaJ,OAAb;YAAsBK,GAAtB,2DAA4BN,QAA5B;YAAA,aACEK,GAAG,CAACE,KADN,EACdC,IADc,cACdA,IADc,EACRC,KADQ,cACRA,KADQ;YAEtBC,OAAO,CAACC,GAAR,CAAYN,GAAG,CAACE,KAAhB;YAFsB;YAAA;YAAA,OAIWL,aAAa,CAACU,IAAd,GACxBJ,IADwB,CACnB;cAAEK,SAAS,EAAEL;YAAb,CADmB,EAExBC,KAFwB,CAElBA,KAFkB,EAEXK,IAFW,EAJX;;UAAA;YAIZC,cAJY;YAAA;YAAA,OAOYZ,cAAc,CAACS,IAAf,EAPZ;;UAAA;YAOZI,eAPY;YAQlBV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cACjBC,GAAG,EAAE,yBADY;cAEjBJ,cAAc,EAAdA,cAFiB;cAGjBC,eAAe,EAAfA;YAHiB,CAArB;YARkB;YAAA;;UAAA;YAAA;YAAA;YAAA,iCAcXV,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cAAEC,GAAG,4CAAqC,YAAIC,OAAzC;YAAL,CAArB,CAdW;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAjBhB,iBAAiB;IAAA;EAAA;AAAA,GAAvB;;AAmBA,IAAMiB,mBAAmB;EAAA,uEAAG;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;MAAA;QAAA;UAAA;YAAOhB,GAAP,8DAAaJ,OAAb;YAAsBK,GAAtB,8DAA4BN,QAA5B;YAAA;YAEdsB,IAFc,GAEPjB,GAAG,CAACiB,IAFG;YAGpBZ,OAAO,CAACC,GAAR,CAAYW,IAAZ;YACMC,aAJc,GAIE,IAAIrB,aAAJ,CAAkBoB,IAAlB,CAJF;YAAA;YAAA,OAMaC,aAAa,CAACC,IAAd,EANb;;UAAA;YAMdC,kBANc;YAQpBnB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cACjBC,GAAG,EAAE,+BADY;cAEjBM,kBAAkB,EAAlBA;YAFiB,CAArB;YARoB;YAAA;;UAAA;YAAA;YAAA;YAAA,kCAabnB,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;cAAEC,GAAG,8CAAuC,aAAIC,OAA3C;YAAL,CAArB,CAba;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAnBC,mBAAmB;IAAA;EAAA;AAAA,GAAzB;;AAiBAK,MAAM,CAACC,OAAP,GAAiB;EACbvB,iBAAiB,EAAjBA,iBADa;EAEbiB,mBAAmB,EAAnBA;AAFa,CAAjB"}