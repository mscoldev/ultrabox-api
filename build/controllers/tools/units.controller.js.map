{"version":3,"file":"units.controller.js","names":["require","response","request","Types","boom","Unit","getUnits","req","res","next","find","units","length","status","json","message","notFound","createUnit","body","name","symbol","newUnit","save","unit","updateUnitById","_id","ObjectId","params","findByIdAndUpdate","msg","deleteUnitById","findByIdAndDelete","deletedUnit","module","exports"],"sources":["../../../src/controllers/tools/units.controller.js"],"sourcesContent":["const { response, request } = require(\"express\");\nconst { Types } = require('mongoose')\nconst boom = require('@hapi/boom');\nconst Unit = require(\"../../models/tools/unit\");\n\n\n\nconst getUnits = async(req = request, res = response, next) => {\n    try {\n        const units = await Unit.find();\n        if (units.length !== 0) {\n            res.status(200).json({\n                message: 'Lista de unidades',\n                units\n            })\n        } else {\n            throw boom.notFound('Oops!, no hay unidades registradas aun!')\n        }\n\n    } catch (err) {\n        next(err);\n    }\n}\n\nconst createUnit = async(req = request, res = response, next) => {\n    const { name, symbol } = req.body\n    try {\n        const newUnit = new Unit({ name, symbol });\n        const unit = await newUnit.save();\n\n        res.status(201).json({\n            message: 'Nueva unidad de medida creada con exito!',\n            unit\n        })\n    } catch (err) {\n        next(err);\n    }\n}\n\nconst updateUnitById = async(req = request, res = response, next) => {\n    try {\n        const _id = Types.ObjectId(req.params._id);\n        const { name, symbol } = req.body;\n        const unit = await Unit.findByIdAndUpdate(_id, { name, symbol }, { new: true });\n        if (unit != null) {\n            res.status(200).json({\n                msg: 'Unidad de medida actualizada',\n                unit\n            });\n        } else {\n            throw boom.notFound('Oops!, unidad no existe, verifique el id de la unidad.')\n        }\n    } catch (err) {\n        next(err);\n    }\n\n}\n\nconst deleteUnitById = async(req = request, res = response, next) => {\n    try {\n        const _id = Types.ObjectId(req.params._id);\n        const deletedUnit = await Unit.findByIdAndDelete(_id);\n        if (deletedUnit != null) {\n            res.status(202).json({\n                msg: 'Unidad de medición eliminada Id:' + _id\n            });\n        } else {\n            throw boom.notFound('Oops!, unidad de medición  no encontrada, verifique el id')\n        }\n    } catch (err) {\n        next(err);\n    }\n}\n\nmodule.exports = {\n    getUnits,\n    createUnit,\n    updateUnitById,\n    deleteUnitById\n}"],"mappings":"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"}