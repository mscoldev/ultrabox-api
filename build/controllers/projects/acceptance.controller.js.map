<<<<<<< HEAD
{"version":3,"file":"acceptance.controller.js","names":["require","response","request","boom","Types","PjAcceptance","updateDynamicAcceptance","setAcceptanceById","findSomeStageComplete","getAcceptanceById","req","res","next","query","_id","_codeProjectERP","undefined","badRequest","findOne","$or","populate","path","model","acceptance","status","json","msg","notFound","setAcceptance","stage","name","date","Date","now","completed","body","signatory","data","newAcceptance","save","acceptanceSaved","console","log","updateAcceptanceById","serviceValue","recommendations","rejectedMessage","ObjectId","params","RejectedMessage","$push","updatedAcceptance","module","exports"],"sources":["../../../src/controllers/projects/acceptance.controller.js"],"sourcesContent":["const { response, request } = require('express');\nconst boom = require('@hapi/boom');\nconst { Types } = require('mongoose');\nconst PjAcceptance = require('../../models/projects/acceptance.model');\n\nconst {\n  updateDynamicAcceptance,\n  setAcceptanceById,\n  findSomeStageComplete,\n} = require('../../helpers/validators/projects/stages');\n\nconst getAcceptanceById = async (req = request, res = response, next) => {\n  try {\n    const { _id, _codeProjectERP } = req.query;\n    if ((_id == undefined) & (_codeProjectERP == undefined)) {\n      throw boom.badRequest(\n        'Debe definir mínimo un parámetro de consulta: _id o _codeProjectERP'\n      );\n    } else {\n      //*Aquí buscamos en la base de datos por cualquiera de los dos parámetros.\n      const acceptance = await PjAcceptance.findOne({\n        $or: [{ _codeProjectERP }, { _id }],\n      }).populate({ path: '_idFiles', model: 'File' });\n      if (acceptance != null) {\n        res.status(200).json({\n          msg: 'Acta de aceptación',\n          acceptance,\n        });\n      } else {\n        throw boom.notFound(\n          `Oops!, no se encontraron actas con alguno de los parámetros de búsqueda ingresados.`\n        );\n      }\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst setAcceptance = async (req = request, res = response, next) => {\n  //* Crear un acta por medio del formulario y asignar por defecto la condición de \"new\". No permitir el ingreso de firmas en el primer estado.\n\n  try {\n    const stage = { name: 'new', date: Date.now(), completed: true };\n    const { signatory, ...data } = req.body;\n    data['stage'] = stage;\n    const newAcceptance = new PjAcceptance(data);\n    const acceptanceSaved = await newAcceptance.save();\n    console.log(acceptanceSaved);\n    res.status(200).json({\n      msg: 'Nueva acta de aceptación de proyecto almacenada',\n      acceptanceSaved,\n    });\n  } catch (err) {\n    next(err);\n  }\n};\n\n//TODO: Implementar actualizacion general de acta sin mensajes de rechazo.\n//TODO: Implementra cambios de estado del acta automatizados desde el backend.\n\nconst updateAcceptanceById = async (req = request, res = response, next) => {\n  try {\n    const body = req.body;\n    const { stage, signatory, serviceValue, recommendations } = req.body;\n    const { rejectedMessage } = body;\n    const _id = Types.ObjectId(req.params._id);\n\n    //* Si el Stage del acta es new se reciben los datos para la firma por parte del contractor.\n    //* las otros datos no se tienen en cuenta, debe verificarse el si stage es rejected al momento te recibir\n    //* de ser asi, se almacena el rejectedMessage.description y el stage tendría un rejected\n\n    if (!stage && rejectedMessage != null) {\n      const RejectedMessage = {\n        $push: {\n          rejectedMessage: rejectedMessage,\n        },\n        stage: { name: stage.name },\n      };\n      const updatedAcceptance = await setAcceptanceById(_id, RejectedMessage);\n      console.log('Activado rejected');\n      res.status(200).json({\n        msg: 'Acta actualizada',\n        updatedAcceptance,\n      });\n    } else {\n      const updatedAcceptance = await updateDynamicAcceptance(\n        _id,\n        signatory,\n        serviceValue,\n        recommendations\n      );\n      console.log('Activado updated');\n      res.status(200).json({\n        msg: 'Acta actualizada',\n        updatedAcceptance,\n      });\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nmodule.exports = {\n  setAcceptance,\n  getAcceptanceById,\n  updateAcceptanceById,\n};\n"],"mappings":"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"}
=======
{"version":3,"file":"acceptance.controller.js","names":["require","response","request","boom","Types","PjAcceptance","updateDynamicAcceptance","setAcceptanceById","findSomeStageComplete","getAcceptanceById","req","res","next","query","_id","_codeProjectERP","undefined","badRequest","findOne","$or","populate","path","model","acceptance","status","json","msg","notFound","setAcceptance","stage","name","date","Date","now","completed","body","signatory","data","newAcceptance","save","acceptanceSaved","console","log","updateAcceptanceById","serviceValue","recommendations","rejectedMessage","ObjectId","params","description","RejectedMessage","$push","updatedAcceptance","module","exports"],"sources":["../../../src/controllers/projects/acceptance.controller.js"],"sourcesContent":["const { response, request } = require('express');\nconst boom = require('@hapi/boom');\nconst { Types } = require('mongoose');\nconst PjAcceptance = require('../../models/projects/acceptance.model');\n\nconst {\n  updateDynamicAcceptance,\n  setAcceptanceById,\n  findSomeStageComplete,\n} = require('../../helpers/validators/projects/stages');\n\nconst getAcceptanceById = async (req = request, res = response, next) => {\n  try {\n    const { _id, _codeProjectERP } = req.query;\n    if ((_id == undefined) & (_codeProjectERP == undefined)) {\n      throw boom.badRequest(\n        'Debe definir mínimo un parámetro de consulta: _id o _codeProjectERP'\n      );\n    } else {\n      //*Aquí buscamos en la base de datos por cualquiera de los dos parámetros.\n      const acceptance = await PjAcceptance.findOne({\n        $or: [{ _codeProjectERP }, { _id }],\n      }).populate({ path: '_idFiles', model: 'File' });\n      if (acceptance != null) {\n        res.status(200).json({\n          msg: 'Acta de aceptación',\n          acceptance,\n        });\n      } else {\n        throw boom.notFound(\n          `Oops!, no se encontraron actas con alguno de los parámetros de búsqueda ingresados.`\n        );\n      }\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nconst setAcceptance = async (req = request, res = response, next) => {\n  //* Crear un acta por medio del formulario y asignar por defecto la condición de \"new\". No permitir el ingreso de firmas en el primer estado.\n\n  try {\n    const stage = { name: 'new', date: Date.now(), completed: true };\n    const { signatory, ...data } = req.body;\n    data['stage'] = stage;\n    const newAcceptance = new PjAcceptance(data);\n    const acceptanceSaved = await newAcceptance.save();\n    console.log(acceptanceSaved);\n    res.status(200).json({\n      msg: 'Nueva acta de aceptación de proyecto almacenada',\n      acceptanceSaved,\n    });\n  } catch (err) {\n    next(err);\n  }\n};\n\n//TODO: Implementar actualización general de acta sin mensajes de rechazo.\n//TODO: Implementar cambios de estado del acta automatizados desde el backend.\n\nconst updateAcceptanceById = async (req = request, res = response, next) => {\n  try {\n    const body = req.body;\n    const { stage, signatory, serviceValue, recommendations } = req.body;\n    const { rejectedMessage } = body;\n    const _id = Types.ObjectId(req.params._id);\n\n    //* Si el Stage del acta es new se reciben los datos para la firma por parte del contractor.\n    //* las otros datos no se tienen en cuenta, debe verificarse el si stage es rejected al momento te recibir\n    //* de ser asi, se almacena el rejectedMessage.description y el stage tendría un rejected\n\n    //TODO: Terminar de validar el caso de mensajes rechazados.\n    const description = data?.rejectedMessage?.description;\n    // const a = typeof description === 'string';\n\n    if (rejectedMessage) {\n      const RejectedMessage = {\n        $push: { rejectedMessage: rejectedMessage },\n      };\n      const updatedAcceptance = await setAcceptanceById(\n        _id,\n        RejectedMessage,\n        serviceValue,\n        recommendations\n      );\n      console.log('Activado rejected');\n      res.status(200).json({\n        msg: 'Acta actualizada',\n        updatedAcceptance,\n      });\n    } else {\n      const updatedAcceptance = await updateDynamicAcceptance(\n        _id,\n        signatory,\n        serviceValue,\n        recommendations\n      );\n      console.log('Activado updated');\n      res.status(200).json({\n        msg: 'Acta actualizada',\n        updatedAcceptance,\n      });\n    }\n  } catch (err) {\n    next(err);\n  }\n};\n\nmodule.exports = {\n  setAcceptance,\n  getAcceptanceById,\n  updateAcceptanceById,\n};\n"],"mappings":"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"}
>>>>>>> develop
