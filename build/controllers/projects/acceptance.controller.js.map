{"version":3,"file":"acceptance.controller.js","names":["require","response","request","boom","Types","PjAcceptance","updateDynamicAcceptance","setAcceptanceById","findSomeStageComplete","getAcceptanceById","req","res","next","query","_id","_codeProjectERP","undefined","badRequest","findOne","$or","populate","path","model","acceptance","status","json","msg","notFound","setAcceptance","stage","Date","now","body","signatory","data","newAcceptance","save","acceptanceSaved","console","log","updateAcceptanceById","rejectedMessage","ObjectId","params","RejectedMessage","$push","name","updatedAcceptance","module","exports"],"sources":["../../../src/controllers/projects/acceptance.controller.js"],"sourcesContent":["const { response, request } = require(\"express\");\nconst boom = require('@hapi/boom');\nconst { Types } = require('mongoose');\nconst PjAcceptance = require(\"../../models/projects/acceptance.model\");\n\nconst { updateDynamicAcceptance, setAcceptanceById, findSomeStageComplete } = require('../../helpers/validators/projects/stages')\n\n\n\n\nconst getAcceptanceById = async (req = request, res = response, next) => {\n  try {\n    const { _id, _codeProjectERP } = req.query;\n    if (_id == undefined & _codeProjectERP == undefined) {\n      throw boom.badRequest('Debe definir mínimo un parámetro de consulta: _id o _codeProjectERP')\n    } else {\n      //*Aquí buscamos en la base de datos por cualquiera de los dos parámetros.\n      const acceptance = await PjAcceptance\n        .findOne({ $or: [{ _codeProjectERP }, { _id }] })\n        .populate({ path: '_idFiles', model: 'File' })\n      if (acceptance != null) {\n        res.status(200).json({\n          msg: 'Acta de aceptación',\n          acceptance\n        })\n      } else {\n        throw boom.notFound(`Oops!, no se encontraron actas con alguno de los parámetros de búsqueda ingresados.`)\n      }\n    }\n  } catch (err) {\n    next(err);\n  }\n}\n\n\n\nconst setAcceptance = async (req = request, res = response, next) => {\n  //* Crear un acta por medio del formulario y asignar por defecto la condición de \"new\". No permitir el ingreso de firmas en el primer estado.\n\n  try {\n    const stage = { \"name\": \"new\", \"date\": Date.now(), \"completed\": true }\n    const { signatory, ...data } = req.body;\n    data['stage'] = stage;\n    const newAcceptance = new PjAcceptance(data);\n    const acceptanceSaved = await newAcceptance.save();\n    console.log(acceptanceSaved);\n    res.status(200).json({\n      msg: 'Nueva acta de aceptación de proyecto almacenada',\n      acceptanceSaved\n    });\n\n  } catch (err) {\n    next(err);\n  }\n}\n\n\n//TODO: Implementar actualizacion general de acta sin mensajes de rechazo.\n//TODO: Implementra cambios de estado del acta automatizados desde el backend.\n\n\nconst updateAcceptanceById = async (req = request, res = response, next) => {\n  try {\n    const body = req.body\n    const { stage, signatory } = req.body\n    const { rejectedMessage } = body\n    const _id = Types.ObjectId(req.params._id);\n\n    //* Si el Stage del acta es new se reciben los datos para la firma por parte del contractor.\n    //* las otros datos no se tienen en cuenta, debe verificarse el si stage es rejected al momento te recibir\n    //* de ser asi, se almacena el rejectedMessage.description y el stage tendría un rejected\n\n    if (!stage && rejectedMessage != null) {\n      const RejectedMessage = {\n        $push: {\n          rejectedMessage: rejectedMessage,\n        },\n        stage: { name: stage.name }\n      };\n      const updatedAcceptance = await setAcceptanceById(_id, RejectedMessage);\n      console.log(\"Activado rejected\");\n      res.status(200).json({\n        msg: 'Acta actualizada',\n        updatedAcceptance\n      })\n    } else {\n      const updatedAcceptance = await updateDynamicAcceptance(_id, signatory);\n      console.log(\"Activado updated\");\n      res.status(200).json({\n        msg: 'Acta actualizada',\n        updatedAcceptance\n      })\n    }\n  } catch (err) {\n    next(err);\n  }\n}\n\n\nmodule.exports = {\n  setAcceptance,\n  getAcceptanceById,\n  updateAcceptanceById,\n}"],"mappings":"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"}