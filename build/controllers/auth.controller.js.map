{"version":3,"file":"auth.controller.js","names":["require","response","request","bcryptjs","moment","generateJWT","verifyJWT","boom","User","config","getUsers","req","res","find","populate","path","model","options","lean","select","name","menu","exec","users","status","json","msg","message","getUserByUid","paramsId","params","id","findById","findUser","signUp","body","username","middleName","firstSurname","secondSurname","nit","typeDocument","email","mobile","password","deleted","role","encryptPassword","newUser","save","savedUser","code","errMsg","Object","keys","keyValue","statusText","updateUser","findByIdAndUpdate","login","findOne","user","validPassword","compareSync","token","verifyToken","next","decoded","dateExpired","exp","notExpired","Date","now","iat","format","expSeconds","diff","expired","getUserByUserName","console","log","module","exports"],"sources":["../../src/controllers/auth.controller.js"],"sourcesContent":["const { response, request } = require('express');\nconst bcryptjs = require('bcryptjs');\nconst moment = require('moment');\nconst { generateJWT, verifyJWT } = require('../helpers/funtionsJWT')\nconst boom = require('@hapi/boom')\n\n\nconst User = require('../models/user.model');\n\n\n\nrequire(\"dotenv\").config();\n\nconst getUsers = async (req = request, res = response) => {\n    try {\n        const users = await User.find({ \"deleted\": false })\n            .populate([{\n                path: 'role',\n                model: 'Role',\n                options: { lean: true },\n                select: { name: 1, menu: 1 }\n            }]).exec();\n\n        res.status(200).json({\n            msg: 'Lista de usuarios',\n            users\n        })\n    } catch (err) {\n        return res.status(500).json({ message: err.message });\n    }\n}\n\nconst getUserByUid = async (req = request, res = response) => {\n\n    try {\n        const paramsId = req.params.id;\n        const findUser = await User.findById(paramsId)\n            .populate([{\n                path: 'role',\n                model: 'Role',\n                options: { lean: true },\n                select: { name: 1, menu: 1 }\n            }]).exec();\n\n        if (findUser != null) {\n            res.status(200).json({\n                msg: 'Datos de usuario',\n                findUser\n            });\n        } else {\n            res.status(404).json({\n                msg: 'Usuario no encontrado, verifique el Id ingresado'\n            })\n        }\n    } catch (err) {\n        return res.status(500).json({\n            message: err.message\n        })\n    }\n\n}\n\n//*DAR DE ALTA UN NUEVO USUARIO - NO DEVUELVE TOKEN\nconst signUp = async (req = request, res = response) => {\n    try {\n        const { username,\n            name,\n            middleName,\n            firstSurname,\n            secondSurname,\n            nit,\n            typeDocument,\n            email,\n            mobile,\n            password,\n            status,\n            deleted,\n            role } = req.body;\n\n        const newUser = new User({\n            username,\n            name,\n            middleName,\n            firstSurname,\n            secondSurname,\n            nit,\n            typeDocument,\n            email,\n            mobile,\n            status,\n            deleted,\n            role,\n            password: await User.encryptPassword(password)\n        });\n        //* assign role - if role == null default role is user.\n\n        // if (role) {\n        //     const foundrole = await Role.find({ name: { $in: role } });\n        //     newUser.role = foundrole.map((role) => role._id);\n        // } else {\n        //     const role = await Role.findOne({ name: { $in: \"user\" } });\n        //     newUser.role = [role._id];\n        // }\n\n        // //*Return TOKEN to FRONTEND\n        // const token = jwt.sign({ id: savedUser._id }, process.env.SECRET_KEY, {\n        //     expiresIn: 86400, //*24 Hours\n        // });\n\n        const savedUser = await newUser.save();\n        res.status(200).json({\n            msg: 'Alta de usuario',\n            savedUser\n        })\n\n    } catch (err) { // Set custom error for unique keys\n        let errMsg;\n        if (err.code == 11000) {\n            errMsg = `Uno o mas datos del usuario existen se encuentran registrados: ${err.message} Objeto: ` + Object.keys(err.keyValue)[0];\n        } else {\n            errMsg = err.message;\n        }\n        res.status(400).json({ statusText: \"Bad Request\", message: errMsg })\n    }\n};\n\n// const signIn = async (req = request, res = response) => {\n//     const usernameFound = await User.findOne({ username: req.body.username }).populate('role');\n//     if (!usernameFound) {\n//         return res.status(400).json({\n//             msg: \"Usuario o password incorrectos - Username\",\n//         });\n//     } else {\n//         console.log(\"Usuario encontrado\");\n//         console.log(usernameFound);\n//         console.log(\"role: \" + usernameFound.role);\n//         const role = usernameFound.role\n\n//         const token = jwt.sign({ id: usernameFound._id }, process.env.SECRET_KEY, {\n//             expiresIn: 86400, //*24 Hours\n//         });\n\n//         res.status(200).json({ token, role });\n\n//     }\n\n//     //TODO: Verificar si el usuario esta activo\n//     // if (!User.status) {\n//     //     return res.status(400).json({\n//     //         msg: 'Usuario o password incorrectos - Inactivo'\n//     //     });\n//     // }\n\n//     //TODO: Verificar la contrasena\n// };\n\nconst updateUser = async (req = request, res = response) => {\n\n    try {\n        const paramsId = req.params.id;\n        const { password, ...body } = req.body;\n        //* Update password - If receive password, encrypt and add in body \n\n        if (password) {\n            body.password = await User.encryptPassword(password)\n        }\n\n        const findUser = await User.findByIdAndUpdate(paramsId, body, { new: true })\n        if (findUser != null) {\n            res.status(200).json({\n                msg: 'Datos de usuario actualizados',\n                findUser\n            });\n        } else {\n            res.status(404).json({\n                msg: 'Usuario no encontrado, verifique el Id ingresado'\n            })\n        }\n    } catch (err) {\n        return res.status(500).json({\n            message: err.message\n        })\n    }\n\n};\n\nconst login = async (req = request, res = response) => {\n    const { username, password } = req.body;\n    try {\n\n        //*verify if exist user\n\n        const user = await User.findOne({ username })\n            .populate([{\n                path: 'role',\n                options: { lean: true }\n            }]).exec();\n\n        if (!user) {\n            return res.status(400).json({\n                msg: 'Oops!, Usuario o Contraseña incorrecto'\n            })\n        }\n\n        //*Verify user active\n        if (!user.status) {\n            return res.status(401).json({\n                msg: 'El usuario no se encuentra activo, consulte al administrador'\n            })\n        }\n\n        //*Verify password\n        const validPassword = bcryptjs.compareSync(password, user.password);\n        if (!validPassword) {\n            return res.status(400).json({\n                msg: 'Oops!, Usuario o Contraseña incorrecto'\n            })\n\n        }\n        //Generar JWT\n        const token = await generateJWT(user.id);\n        res.status(200).json({\n            msg: 'Login OK',\n            user,\n            token\n        })\n\n    } catch (error) {\n        return res.status(500).json({\n            msg: 'Error interno, consulte con el administrador'\n        });\n    }\n\n}\n\n\nconst verifyToken = async (req = request, res = response, next) => {\n    try {\n        const { token } = req.body\n        const decoded = await verifyJWT(token)\n        const dateExpired = decoded.exp * 1000\n        const notExpired = (Date.now() <= dateExpired) ? false : true;\n\n        return res.status(201).json({\n            iat: moment(decoded.iat * 1000).format('YYYY-MM-DD HH:mm:ss'),\n            exp: moment(decoded.exp * 1000).format('YYYY-MM-DD HH:mm:ss'),\n            expSeconds: moment(dateExpired).diff(moment(Date.now()), 'seconds'),\n            expired: notExpired\n        })\n\n    } catch (err) {\n        next(err);\n    }\n}\n\nconst getUserByUserName = async (req = request, res = response) => {\n    console.log(\"getUserByUserName - Ejecutandose\");\n    try {\n        const { username, password } = req.body;\n        console.log('Este es el req.body: ' + req.body);\n        const findUser = await User.findOne({ username: username })\n        console.log(findUser);\n        if (findUser != null) {\n            res.status(200).json({\n                msg: 'Datos de usuario',\n                findUser\n            });\n        } else {\n            res.status(404).json({\n                msg: 'Usuario no encontrado, verifique el Id ingresado'\n            })\n        }\n    } catch (err) {\n        console.log('Este es el error de body');\n        return res.status(500).json({\n            message: err.message\n        })\n    }\n\n}\n\n\nmodule.exports = {\n    signUp,\n    getUsers,\n    getUserByUid,\n    getUserByUserName,\n    updateUser,\n    verifyToken,\n    login\n};\n"],"mappings":"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"}