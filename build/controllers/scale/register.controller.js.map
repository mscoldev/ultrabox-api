{"version":3,"file":"register.controller.js","names":["require","response","request","moment","Register","Truck","createDriverFromRegister","getRegisters","req","res","query","limit","order","offset","findAll","where","enabled","include","all","registers","status","json","msg","message","getRegisterById","id","params","findByPk","register","console","log","getLastRegisterByNumberPlate","numberPlate","findOne","truckData","_idTruck","updateRegisterById","next","body","weight","userRecorder","qty","serialScale","newRegister","dateRegister","date","fechaTexto","formatoEntrada","fecha","toDate","formatedDate","secondWeight","secondDateWeight","tare","dateTara","toISOString","groosWeight","netWeight","operation","dateNet","Date","save","registerSaved","deleteRegisterById","deletedRegister","createRegister","_idProduct","driver","_idClient","_idOrigin","_idSite","_idDriver","max","getLastSerialLog","create","serialLog","dateWeight","newDriver","module","exports"],"sources":["../../../src/controllers/scale/register.controller.js"],"sourcesContent":["const { response, request } = require('express');\nconst moment = require('moment');\n\nconst Register = require('../../models/scale/register.model');\nconst Truck = require('../../models/scale/truck.model');\n\nconst { createDriverFromRegister } = require('../../controllers/scale/driver.controller');\n\n\n\nconst getRegisters = async (req = request, res = response) => {\n    try {\n        const { limit, order, offset } = req.query;\n        const registers = await Register.findAll({\n            where: { enabled: true },\n            include: { all: true },\n            order: [['createdAt', order]],\n            limit: limit,\n            offset: offset\n        });\n\n\n        res.status(200).json({\n            msg: 'Registro actualizado con exito',\n            registers\n        });\n    } catch (err) {\n        return res.status(500).json({ message: err.message });\n    }\n}\n\nconst getRegisterById = async (req = request, res = response) => {\n    try {\n        const { id } = req.params;\n        const register = await Register.findByPk(id);\n        if (register != null) {\n            res.status(200).json({\n                msg: 'InformaciÃ³n del Registro',\n                register\n            });\n        } else {\n            console.log('Not found');\n            res.status(200).json({\n                msg: 'Registro no encontrado, verifique el Id ingresado'\n            });\n        }\n\n    } catch (err) {\n        return res.status(500).json({ message: `Se ha producido un error, ${err.message}` });\n    }\n}\n\nconst getLastRegisterByNumberPlate = async (req = request, res = response) => {\n\n    try {\n        const { numberPlate } = req.params\n        const { limit, order, status, ...query } = req.query;\n\n        const truckData = await Truck.findOne({ where: { numberPlate: numberPlate } });\n\n        if (!truckData) {\n            return res.status(404).json({ msg: 'El vehiculo ${numberPlate} no se ecuentra registrado' })\n        }\n        const registers = await Register.findOne({\n            where: {\n                _idTruck: truckData.id,\n                status: status,\n                enabled: true\n            },\n            include: { all: true },\n            order: [['createdAt', order]],\n            limit: limit\n        });\n\n        if (registers != null) {\n            return res.status(200).json({\n                msg: `Registro(s) activos para el vehiculo ${numberPlate}:`,\n                registers\n            })\n        }\n        return res.status(404).json({\n            msg: `No se encontraron registros activos en estado \"${status}\" para el vehiculo de placas ${numberPlate}.\n            Verifique los valores de la consulta o compruebe si \"status\" es valido.` })\n    } catch (err) {\n        return res.status(500).json({ message: `Se ha producido un error, ${err.message}` });\n    }\n}\n\nconst updateRegisterById = async (req = request, res = response, next) => {\n    try {\n        const { id } = req.params;\n        const { weight, status, userRecorder, qty, serialScale, } = req.body;\n        const newRegister = await Register.findByPk(id);\n\n        if (newRegister != null) {\n            const dateRegister = newRegister.date\n            const fechaTexto = dateRegister;\n            const formatoEntrada = \"DD-MM-YYYY HH:mm\";\n            const fecha = moment(fechaTexto, formatoEntrada).toDate();\n\n            const formatedDate = fecha //new Date(dateRegister).toISOString();\n\n            newRegister.secondWeight = weight;\n            newRegister.secondDateWeight = null; //trigger setValue\n            newRegister.status = status;\n            newRegister.userRecorder = userRecorder;\n            newRegister.qty = qty;\n            newRegister.serialScale = serialScale;\n\n\n            //*Identificar Cargando o Descargando\n\n            if (newRegister.secondWeight > newRegister.weight) {\n                //Estaba Cargando\n                newRegister.tare = newRegister.weight;\n                newRegister.dateTara = formatedDate.toISOString()  //aqui debe colocarse la fecha de la medicion\n                newRegister.groosWeight = newRegister.secondWeight;\n                newRegister.netWeight = newRegister.groosWeight - newRegister.tare\n                newRegister.operation = 'Cargando'\n                newRegister.dateNet = new Date().toISOString();\n\n                console.log(`Primera Medida: ${newRegister.weight}`);\n                console.log(`Segunda Medida: ${newRegister.secondWeight}`);\n                console.log('####Cargando...');\n            } else {\n                //Estaba Descargando\n                console.log('####Descargando...');\n                console.log(`Primera Medida: ${newRegister.weight}`);\n                console.log(`Segunda Medida: ${newRegister.secondWeight}`);\n                newRegister.operation = 'Descargando'\n                newRegister.tare = newRegister.secondWeight;\n                newRegister.dateTara = new Date().toISOString();// aqui debe colocarse la fecha de la segunda captura\n                newRegister.groosWeight = newRegister.weight;\n                newRegister.netWeight = newRegister.groosWeight - newRegister.tare\n                newRegister.dateNet = formatedDate.toISOString()\n            }\n\n\n            //*Autocalcular\n\n\n\n            // newRegister.netWeigth = \"\";\n            // newRegister.dateTara = \"\";\n            // newRegister.dateNet = \"\";\n\n\n            console.log(newRegister);\n            const registerSaved = await newRegister.save();\n\n\n            res.status(200).json({\n                msg: 'Registro actualizado con exito',\n                registerSaved\n            });\n        } else {\n            console.log('Not found');\n            res.status(200).json({\n                msg: 'Registro con encontrado, verifique el Id ingresado'\n            });\n        }\n\n    } catch (err) {\n        next(err);\n    }\n}\n\nconst deleteRegisterById = async (req = request, res = response) => {\n    try {\n        const { id } = req.params;\n\n        const deletedRegister = await Register.findByPk(id)\n        if (deletedRegister != null) {\n\n            deletedRegister.enabled = false;\n            deletedRegister.save();\n\n\n            res.status(202).json({\n                msg: `Registro con Id: ${id}, eliminado`\n            });\n        } else {\n            res.status(404).json({\n                msg: `Registro con Id: ${id}, no encontrado, verifique el Id ingresado.`\n            })\n        }\n    } catch (err) {\n        return res.status(500).json({ message: err.message })\n    }\n}\n\nconst createRegister = async (req = request, res = response, next) => {\n    const {\n        weight,\n        serialScale,\n        status,\n        userRecorder,\n        _idProduct,\n        driver,\n        _idTruck,\n        _idClient,\n        _idOrigin,\n        _idSite,\n        qty,\n        enabled } = req.body;\n\n    if (driver._idDriver != null) {\n        try {\n            const getLastSerialLog = await Register.max('serialLog');\n            const newRegister = await Register.create({\n                serialLog: getLastSerialLog + 1,\n                serialScale,\n                weight,\n                dateTara: new Date().toISOString(),\n                dateNet: new Date().toISOString(),\n                dateWeight: null,\n                status,\n                userRecorder,\n                _idProduct,\n                _idDriver: driver._idDriver, //Cambio para obtener el dato desde un arreglo.\n                _idTruck,\n                _idClient,\n                _idOrigin,\n                _idSite,\n                qty,\n                enabled\n            });\n\n            res.status(201).json({\n                msg: 'Registro creado satisfactoriamente!',\n                newRegister\n            })\n\n        } catch (err) {\n            next(err);\n        }\n\n    } else {\n        try {\n            const getLastSerialLog = await Register.max('serialLog');\n            const newDriver = await createDriverFromRegister(driver)\n\n            const newRegister = await Register.create({\n                serialLog: getLastSerialLog + 1,\n                serialScale,\n                weight,\n                dateWeight: null,\n                status,\n                userRecorder,\n                _idProduct,\n                _idDriver: await newDriver.id,\n                _idTruck,\n                _idClient,\n                _idOrigin,\n                _idSite,\n                enabled\n            });\n            res.status(201).json({\n                msg: 'Registro creado satisfactoriamente!',\n                newDriver,\n                newRegister\n            })\n\n        } catch (err) {\n            next(err);\n        }\n\n    }\n}\n\n\n\n\nmodule.exports = {\n    getRegisters,\n    getRegisterById,\n    getLastRegisterByNumberPlate,\n    updateRegisterById,\n    deleteRegisterById,\n    createRegister\n}"],"mappings":"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"}