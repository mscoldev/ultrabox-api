{"version":3,"file":"auth.routes.js","names":["require","Router","check","passport","validateFields","getUserRol","validateAccessModule","addNameModule","signUp","getUsers","getUserByUid","getUserByUserName","updateUser","login","verifyToken","NAME_MODULE","router","get","post","not","isEmpty","authenticate","session","put","module","exports"],"sources":["../../src/routes/auth.routes.js"],"sourcesContent":["\nconst { Router } = require('express');\nconst { check } = require('express-validator');\nconst passport = require('passport');\nconst { validateFields } = require('../middlewares/validateFields');\n\nconst { getUserRol, validateAccessModule, addNameModule } = require('../middlewares/validateRol');\n\n// Funciones desde el controlador\nconst { signUp,\n    getUsers,\n    getUserByUid,\n    getUserByUserName,\n    updateUser,\n    login,\n    verifyToken } = require('../controllers/auth.controller');\n\nconst NAME_MODULE = 'auth';\n\n//Importacion de Router express\nconst router = Router();\n\n\n//Aqui las rutas necesarias --->\n\n\nrouter.get('/users', getUsers);\nrouter.get('/user/:id', getUserByUid);\nrouter.get('/user/username/', getUserByUserName);\nrouter.post('/token', verifyToken);\n\nrouter.post('/signup', signUp);\n\nrouter.post('/login', [\n    check('username', 'El nombre de usuario es obligatorio').not().isEmpty(),\n    check('password', 'El password es obligatorio').not().isEmpty(),\n    validateFields,\n    passport.authenticate('local', {\n        session: false\n    })\n], login);\n\nrouter.post('/login2', passport.authenticate('local', {\n    session: false\n}), login);\n\nrouter.put('/user/:id',\n\n    // addNameModule(NAME_MODULE),\n    // getUserRol,\n    // validateAccessModule,\n    //TODO Validar acceso al modulo de usuarios.\n    //TODO Validar acceso a edicion - Posibles (Lectura, edicion, eliminacion, root)\n    updateUser);\n\n\n\n// [\n//     check('email', 'el correo no es valido').isEmail(),\n//     check('name', 'El numbre de usuario es requerido').not().isEmpty(),\n//     check('roles').custom(async (roles = '') => {\n//         const existRole = await Role.findOne({ roles });\n//         if (!existRole) {\n//             throw new Error(`El rol ${roles} no esta registrado en la base de datos`)\n//         }\n//     }),\n//     validateFields\n// ]\n\nmodule.exports = router;"],"mappings":";;AACA,eAAmBA,OAAO,CAAC,SAAD,CAA1B;AAAA,IAAQC,MAAR,YAAQA,MAAR;;AACA,gBAAkBD,OAAO,CAAC,mBAAD,CAAzB;AAAA,IAAQE,KAAR,aAAQA,KAAR;;AACA,IAAMC,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AACA,gBAA2BA,OAAO,CAAC,+BAAD,CAAlC;AAAA,IAAQI,cAAR,aAAQA,cAAR;;AAEA,gBAA4DJ,OAAO,CAAC,4BAAD,CAAnE;AAAA,IAAQK,UAAR,aAAQA,UAAR;AAAA,IAAoBC,oBAApB,aAAoBA,oBAApB;AAAA,IAA0CC,aAA1C,aAA0CA,aAA1C,C,CAEA;;;AACA,gBAMoBP,OAAO,CAAC,gCAAD,CAN3B;AAAA,IAAQQ,MAAR,aAAQA,MAAR;AAAA,IACIC,QADJ,aACIA,QADJ;AAAA,IAEIC,YAFJ,aAEIA,YAFJ;AAAA,IAGIC,iBAHJ,aAGIA,iBAHJ;AAAA,IAIIC,UAJJ,aAIIA,UAJJ;AAAA,IAKIC,KALJ,aAKIA,KALJ;AAAA,IAMIC,WANJ,aAMIA,WANJ;;AAQA,IAAMC,WAAW,GAAG,MAApB,C,CAEA;;AACA,IAAMC,MAAM,GAAGf,MAAM,EAArB,C,CAGA;;AAGAe,MAAM,CAACC,GAAP,CAAW,QAAX,EAAqBR,QAArB;AACAO,MAAM,CAACC,GAAP,CAAW,WAAX,EAAwBP,YAAxB;AACAM,MAAM,CAACC,GAAP,CAAW,iBAAX,EAA8BN,iBAA9B;AACAK,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsBJ,WAAtB;AAEAE,MAAM,CAACE,IAAP,CAAY,SAAZ,EAAuBV,MAAvB;AAEAQ,MAAM,CAACE,IAAP,CAAY,QAAZ,EAAsB,CAClBhB,KAAK,CAAC,UAAD,EAAa,qCAAb,CAAL,CAAyDiB,GAAzD,GAA+DC,OAA/D,EADkB,EAElBlB,KAAK,CAAC,UAAD,EAAa,4BAAb,CAAL,CAAgDiB,GAAhD,GAAsDC,OAAtD,EAFkB,EAGlBhB,cAHkB,EAIlBD,QAAQ,CAACkB,YAAT,CAAsB,OAAtB,EAA+B;EAC3BC,OAAO,EAAE;AADkB,CAA/B,CAJkB,CAAtB,EAOGT,KAPH;AASAG,MAAM,CAACE,IAAP,CAAY,SAAZ,EAAuBf,QAAQ,CAACkB,YAAT,CAAsB,OAAtB,EAA+B;EAClDC,OAAO,EAAE;AADyC,CAA/B,CAAvB,EAEIT,KAFJ;AAIAG,MAAM,CAACO,GAAP,CAAW,WAAX,EAEI;AACA;AACA;AACA;AACA;AACAX,UAPJ,E,CAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAY,MAAM,CAACC,OAAP,GAAiBT,MAAjB"}