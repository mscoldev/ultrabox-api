{"version":3,"file":"stages.js","names":["_","require","boom","PjAcceptance","updateDynamicAcceptance","_id","signatory","serviceValue","recommendations","console","log","readAcceptanceById","data","getLastStageName","lastStage","updateStepOne","$set","contractor","$push","stage","name","completed","setAcceptanceById","updatedAcceptance","updateStepTwo","client","typeAcceptance","updateStepThree","result","update","findByIdAndUpdate","updateAcceptance","notFound","findById","acceptance","findSomeStageComplete","someStageName","existingStageComplete","some","stageSome","updateSelectionStage","confirmStage","stages","orderBy","length","module","exports"],"sources":["../../../../src/helpers/validators/projects/stages.js"],"sourcesContent":["const _ = require('lodash');\nconst boom = require('@hapi/boom');\nconst PjAcceptance = require('../../../models/projects/acceptance.model');\n\nconst updateDynamicAcceptance = async (_id, signatory, serviceValue, recommendations) => {\n  console.log(`Consultando id: ${_id}`);\n  //Obtener los datos del acta\n  try {\n    //Consultar registro\n    console.log(`Consultando id: ${_id}`);\n    const data = await readAcceptanceById(_id);\n    console.log({ data });\n    //Ultimo estado reportado\n    const lastStage = await getLastStageName(data);\n    console.log({ lastStage });\n    //Evaluar los Stage y actualizar según el Stage\n    var updatedAcceptance;\n    switch (lastStage) {\n      case 'new':\n        const updateStepOne = {\n          $set: {\n            'signatory.contractor': signatory.contractor,\n          },\n          $push: {\n            stage: {\n              name: 'signedByContractor',\n              completed: true,\n            },\n          },\n        };\n        console.log({ updateStepOne });\n        updatedAcceptance = await setAcceptanceById(_id, updateStepOne);\n        console.log({ updatedAcceptance });\n        //Envía un correo al cliente con los datos para actualizar\n        break;\n      case 'signedByContractor':\n        const updateStepTwo = {\n          $set: {\n            'signatory.client': signatory.client,\n            'serviceValue': serviceValue,\n            'recommendations': recommendations,\n          },\n          $push: {\n            stage: {\n              name: 'signedByClient',\n              completed: true,\n            },\n          },\n        };\n\n        updatedAcceptance = await setAcceptanceById(_id, updateStepTwo);\n\n        //Recibe la firma por parte del cliente y cambia el estado a \"signClient\"\n        if (data.typeAcceptance === 'Parcial') {\n          //El estado se mantiene igual\n          //Se envía correo al gerente de proyecto del contractor para aceptación final.\n          //TODO: Implementar envio de correo al gerente para cierre final del acta.\n        } else {\n          //Se empuja el estado de cerrado.\n          const updateStepThree = {\n            $push: {\n              stage: {\n                name: 'closed',\n                completed: true,\n              },\n            },\n          };\n        };\n          updatedAcceptance = await setAcceptanceById(_id, updateStepThree);\n          break;\n      case 'signedByClient':\n        //Se debe enviar una aceptación de los pendientes\n        const updateStepThree = {\n          $push: {\n            stage: {\n              name: 'closed',\n              completed: true,\n            },\n          },\n        };\n\n        updatedAcceptance = await setAcceptanceById(_id, updateStepThree);\n\n        break;\n      default:\n        console.log('No se encontró ningún stage con ese nombre');\n        result = 'No se encontró ningún stage con ese nombre';\n        return updatedAcceptance;\n    }\n    return updatedAcceptance;\n    } catch (err) {\n      return err;\n    }\n  }\n\n\nconst setAcceptanceById = async (_id, update) => {\n  try {\n    console.log(`id para setAccep ${_id}`);\n    const updateAcceptance = await PjAcceptance.findByIdAndUpdate(_id, update, {\n      new: true,\n    });\n\n    if (updateAcceptance != null) {\n      return updateAcceptance;\n    } else {\n      //TODO: Validar error boom en la función setAcceptanceById del archivo stage\n      throw boom.notFound(`Oops!, acta con _id:${_id}, no encontrada`);;\n    }\n  } catch (err) {\n    return err;\n  }\n};\n\nconst readAcceptanceById = async (_id) => {\n  try {\n    const acceptance = await PjAcceptance.findById(_id);\n    if (acceptance != null) {\n      return acceptance;\n    } else {\n      throw boom.notFound(`Oops!, acta con _id:${_id}, no encontrada`);\n      throw boom.notFound(`Oops!, acta con _id:${_id}, no encontrada`);\n    }\n  } catch (err) {\n    return err;\n  }\n};\n\n\nconst findSomeStageComplete = async (data, someStageName) => {\n  // const data = await readAcceptanceById(_id);\n  const existingStageComplete = data.stage.some(\n    (stageSome) =>\n      stageSome.name === someStageName && stageSome.completed === true\n  );\n  console.log(`Se encontró el estado ${someStageName} completo en el array`);\n  const result = existingStageComplete === true ? someStageName : false;\n  return result;\n};\n\n\nconst updateSelectionStage = async (_id, stage) => {\n  //Obtener los datos de la base datos por medio del _id\n  const data = await readAcceptanceById(_id);\n  //Identifica si el registro cumple con el estado buscado\n  const confirmStage = await findSomeStageComplete(data, stage);\n  return confirmStage;\n};\n\n\nconst getLastStageName = async (data) => {\n  const stages = _.orderBy(data.stage, ['date'], ['desc']);\n  return stages.length > 0 ? stages[0].name : null;\n};\n\n\nmodule.exports = {\n  updateDynamicAcceptance,\n  setAcceptanceById,\n  findSomeStageComplete,\n  getLastStageName,\n};\n"],"mappings":"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"}